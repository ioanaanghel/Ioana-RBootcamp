#outputs all the of the quantile data using the second column from data set zz
quantile(zz[,2])[2]
#outputs the 2th output from the quantile matrix
#######################################################################################################
#2c. Find the value of the phenotype such that 25% of the individuals have a phenotype GREATER than this
#     value (i.e. 75% of the individuals have a phenotype LESS than this value).
quantile(zz[,2])[4]
#outputs the 4th output from the quantile matrix
#######################################################################################################
#2d. Make a density plot of the distribution of phenotypes (i.e. the blood glucose levels). Add vertical
#     lines to the plot to denote the 25% and 75% tails of the distribution.
warnings()
hist(xx)
hist(zz)
hist(numeric(zz))
abline(h=quantile(zz[,2])[4],,lty=5, lwd =3, col=2)
hist(numeric(zz))
zz=read.table("pheno.sim.2014.txt",header=TRUE)
pheno=z$glucose_mmolperL
hist(pheno)
pheno=z$glucose_mmolperL
zz=read.table("pheno.sim.2014.txt",header=TRUE)
phen=zz$glucose_mmolperL
hist(phen)
abline(h=quantile(zz[,2])[4],lty=5, lwd =3, col=2)
quantile(zz[,2])[4]
quantile(zz[,2])[2]
abline(h=quantile(zz[,2])[2],lty=5, lwd =3, col=2)
abline(h=quantile(zz[,2])[4],lwd =1, col=3)
zz=read.table("pheno.sim.2014.txt",header=TRUE)
phen=zz$glucose_mmolperL
hist(phen)
abline(h=quantile(zz[,2])[4],lwd =1, col=3)
abline(h=quantile(zz[,2])[2],lwd =1, col=3)
rm(list = ls())
help("exp")
length(N)
length(time)
tt <- 0
N0 <- 100
RR <- 1.05
pop.size = numeric(11)
ttmax = 10
#set a variable instead of using a sequence of numbers for more flexibility
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
#sets value at first point in vector
for(tt in 1:ttmax){
NN[tt+1] = RR*NN[tt]
}
plot(1:(ttmax+1),NN, xlba="time",ylab="N",col='blue')
#########################################
#changed formula, initialized new variables
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 400
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
#sets value at first point in vector
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]*(1+rr*(1-(NN[tt]/KK)))
}
NN
#only use square bracket
#changed equation from above to new equation - once you have framework easy to adapt to do different stuff
plot(1:(ttmax+1),NN, xlab = "time",ylab="N", col='blue')
#to check if your y and x axis are the same length, type function "length(variable name)"
######################################
#assign output of function to a variable so that you can use it
#instead of initialzing each variable outside of function, include it so that you can assign numbers to variables in the function
geomFun <- function(RR, N0, ttMax){
# Initialize vector to hold output - doing it inside function will allow you to assign variable start within the function
NN <- rep(NA,ttMax+1)
NN[1] <- N0
# Use a for loop to step forward
for (tt in 1:ttMax){
NN[tt+1] <- RR*NN[tt]
}
plot(1:(ttMax+1),NN,lty=2, type='l', xlab='t', ylab='Population size')
return(NN)
}
#####
geomFun <- function(RR=1.01, N0 = 200, ttMax =20){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for (tt in 1:ttMax){
NN[tt+1] <- RR*NN[tt]
}
plot(1:(ttMax+1),NN,lty=2, type='l', xlab='t', ylab='Population size')
return(NN)
}
myOutput <- geomFun(RR=1.01, N0=200, ttMax=20)
####Convert your discrete logistic model into a function.
#Use this function to explore the model's dynamics with ease and grace
LogisticsFun <- function(RR, N0, ttMax, KK){
# Initialize vector to hold output - doing it inside function will allow you to assign variable start within the function
NN <- rep(NA,ttMax+1)
NN[1] <- N0
# Use a for loop to step forward
for (tt in 1:ttMax){
NN[tt+1] = NN[tt]*(1+rr*(1-(NN[tt]/KK)))
}
plot(1:(ttMax+1),NN,lty=2, type='l', xlab='t', ylab='Population size')
return(NN)
}
LogisticsFun(1,100,10,8000)
####_____________________________________________________________
####To make a plot of model summary output versus parameter value
## have to put function inside a for loop (can't put a sequence inside),
LogisticsFun <- function(RR, N0, ttMax, KK){
## Define parameter values
# for parameter of interest, make a vector of values you want to consider
}
rm(list = ls())
tt <- 0
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 100
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]exp(rr*(1-(NN[tt]/KK)))
NN
#only use square bracket
plot(1:(ttmax+1),NN, xlab = "time",ylab="N", col='blue')
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 100
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]exp(rr*(1-(NN[tt]/KK)))
}
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt](exp(rr*(1-(NN[tt]/KK))))
}
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
}
NN
plot(1:(ttmax+1),NN, xlab = "Time",ylab="Population size", col='blue')
rm(list = ls())
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,ttmax){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
}
NN
#only use square bracket
plot(1:(ttmax+1),NN, xlab = "Time",ylab="Population size", col='blue')
plot(1:(ttmax+1),NN, lty=2,type=‘l’, xlab = "Time",ylab="Population size", col='blue')
#Bootcamp modeling exercises
#Assignment 2 - Ioana Anghel
#Ricker Model
###(a)
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
#sets value at first point in vector
RickerFun <- function(rr,N0,ttmax){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
}
NN
#only use square bracket
plot(1:(ttmax+1),NN, lty=2, type=‘l’, xlab = "Time",ylab="Population size", col='blue')
#to check if your y and x axis are the same length, type function "length(variable name)"
length(y)
length(x)
plot(1:(ttmax+1),NN, lty=2, type='l', xlab = "Time",ylab="Population size", col='blue')
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,ttmax){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
}
NN
#only use square bracket
plot(1:(ttmax+1),NN, lty=2, type='l', xlab = "Time",ylab="Population size", col='blue')
plot(1:(ttmax+1),NN, xlab = "Time",ylab="Population size", col='blue')
RickerFun <- function(rr,N0,KK,ttmax){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttmax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
return(NN)
}
RickerFun(1.05,100,400,50)
RickerFun <- function(rr,N0,KK,ttMax){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
return(NN)
}
RickerFun(1.05,100,400,50)
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttmax+1),NN, xlab = "Time",ylab="Population size", col='blue')
}
return(NN)
}
RickerFun(1.05,100,400,50)
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue')
}
return(NN)
}
RickerFun(1.05,100,400,50)
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
RickerFun(1.05,100,400,50)
RickerFun(1.05,100,400,50,0)
RickerFun(1.05,100,400,50,0)
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(0)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(0)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(0)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
> RickerFun(1.05,100,400,0,1)
RickerFun(1.05,100,400,0,1)
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
RickerFun(1.05,100,300,0,1)
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[11] <- 0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
NN[11] <- 0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
#sets value at first point in vector
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
RickerFun(1.05,100,400,50)
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
NN[11] <- 0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}NN[1] <-
return(NN)
}
tt <- 0
N0 <- 100
rr <- 1.05
pop.size = numeric(11)
KK = 300
ttmax = 10
NN <-matrix(NA, nrow=1, ncol=ttmax+1)
NN[1] <- N0
RickerFun <- function(rr,N0,KK,ttMax,PLOTFLAG=1){
NN <- rep(NA,ttMax+1)
NN[1] <- N0
NN[11] <- 0
for(tt in 1:ttMax) {
NN[tt+1] = NN[tt]*exp(rr*(1-(NN[tt]/KK)))
}
if (PLOTFLAG==1){
plot(1:(ttMax+1),NN, xlab = "Time",ylab="Population size", col='blue',type='l')
}
return(NN)
}
RickerFun(1.05,100,400,50)
RickerFun(1.05,100,400,50)
RickerFun(1.05,300,0,50)
RickerFun(1.05,100,0,50)
RickerFun(1.05,100,100,50)
RickerFun(1.05,100,300,50)
RickerFun(1.5,100,300,50)
RickerFun(1.05,100,0,50)
RickerFun(1.05,100,KK,50)
RickerFun(1.05,100,0,50)
RickerFun(1.05,100,300,50)
RickerFun(-1.05,100,400,50)
RickerFun(1.05,100,400,50)
RickerFun(2,100,400,50)
RickerFun(3,100,400,50)
RickerFun(1.5,100,400,50)
RickerFun(1.7,100,400,50)
RickerFun(1.8,100,400,50)
RickerFun(2,100,400,50)
RickerFun(2.5,100,400,50)
RickerFun(2.3,100,400,50)
RickerFun(1.2,100,300,50)
RickerFun(1.5,100,300,50)
RickerFun(1.5,100,400,50)
RickerFun(1,100,400,50)
RickerFun(0.5,100,400,50)
RickerFun(0.25,100,400,50)
RickerFun(0.1,100,400,50)
RickerFun(0.15,100,400,50)
RickerFun(0.15,20,400,50)
RickerFun(0.15,10,400,50)
RickerFun(-1.05,10,400,50)
RickerFun(-.5,10,400,50)
RickerFun(-.25,10,400,50)
RickerFun(0.15,10,400,50)
RickerFun(1.5,10,400,50)
RickerFun(1.05,10,400,50)
RickerFun(-0.25,10,400,50)
RickerFun(0.15,10,400,50)
RickerFun(1.5,100,400,50)
RickerFun(2.3,100,400,50)
RickerFun(3,100,400,50)
rr.int <- (c(-0.25,0.15,1.5,2.3,3))
rr.int <- (c(-0.25,0.15,1,1.5,2.3,3))
RickerFun(rr.int,100,400,50)
RickerFun[rr.int]
RickerFun([rr.int],100,400,50)
rr <- (c(-0.25,0.15,1,1.5,2.3,3))
RickerFun(rr,100,400,50)
par(mfrow=c(3,2))
rr <- c(-0.25,0.15,1,1.5,2.3,3)
for (ii in 1:length(rr)){
RickerFun(rr[ii],100,400,50)
}
RickerFun
nvec <- RickerFun(1.05,20,1000,50)
nvec(1)
head(nvec)
which(nvec >= 500)
which(nvec >= 500)[1]
